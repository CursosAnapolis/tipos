// Manipulador de formul√°rios para envio ao Discord
document.addEventListener('DOMContentLoaded', function() {
    const formulariosCadastro = document.querySelectorAll('form[id^="form-cadastro"]');
    
    formulariosCadastro.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Validar formul√°rio antes de enviar
            if (!validarFormulario(this)) {
                return;
            }
            
            // Coletar dados do formul√°rio
            const formData = new FormData(this);
            const dados = {};
            
            for (const [key, value] of formData.entries()) {
                dados[key] = value;
            }
            
            // Adicionar informa√ß√µes adicionais
            dados.curso = this.getAttribute('data-curso');
            dados.dataInscricao = new Date().toLocaleString('pt-BR');
            dados.pagina = window.location.href;
            
            // Enviar para o webhook do Discord
            enviarParaDiscord(dados, this);
        });
    });
    
    function validarFormulario(formulario) {
        const camposObrigatorios = formulario.querySelectorAll('[required]');
        let valido = true;
        
        camposObrigatorios.forEach(campo => {
            if (!campo.value.trim()) {
                campo.style.borderColor = '#f44336';
                valido = false;
                
                // Remover o estilo de erro quando o usu√°rio come√ßar a digitar
                campo.addEventListener('input', function() {
                    this.style.borderColor = '#ddd';
                });
            }
        });
        
        // Validar CPF (formato b√°sico)
        const cpf = formulario.querySelector('input[name="cpf"]');
        if (cpf && cpf.value) {
            const cpfLimpo = cpf.value.replace(/\D/g, '');
            if (cpfLimpo.length !== 11) {
                alert('Por favor, insira um CPF v√°lido com 11 d√≠gitos.');
                cpf.style.borderColor = '#f44336';
                cpf.focus();
                valido = false;
            }
        }
        
        // Validar e-mail
        const email = formulario.querySelector('input[type="email"]');
        if (email && email.value) {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email.value)) {
                alert('Por favor, insira um e-mail v√°lido.');
                email.style.borderColor = '#f44336';
                email.focus();
                valido = false;
            }
        }
        
        return valido;
    }
    
    function enviarParaDiscord(dados, formulario) {
        const webhookURL = 'https://discord.com/api/webhooks/1430258829165199490/6t1fJXseq3PRqZ6n1n05olNazwiSts39YUsAxEVjrPsZesfsGUfrcSgFsdORyI3cMod6';
        
        // Formatar mensagem para o Discord
        const mensagem = {
            content: 'üéì Nova inscri√ß√£o recebida!',
            embeds: [{
                title: `Inscri√ß√£o no curso: ${dados.curso}`,
                color: 0x8A2BE2,
                fields: [
                    {
                        name: 'üë§ Nome',
                        value: dados.nome || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üéÇ Idade',
                        value: dados.idade || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üìÑ CPF',
                        value: dados.cpf || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üë© Nome da M√£e',
                        value: dados.mae || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üë® Nome do Pai',
                        value: dados.pai || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üìß E-mail',
                        value: dados.email || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üìû Telefone',
                        value: dados.telefone || 'N√£o informado',
                        inline: true
                    },
                    {
                        name: 'üìÖ Data da Inscri√ß√£o',
                        value: dados.dataInscricao,
                        inline: true
                    },
                    {
                        name: 'üåê P√°gina',
                        value: dados.pagina || 'N√£o informado',
                        inline: true
                    }
                ],
                timestamp: new Date().toISOString(),
                footer: {
                    text: 'Cursos An√°polis - Sistema de Inscri√ß√µes'
                }
            }]
        };
        
        // Alterar estado do bot√£o
        const botao = formulario.querySelector('button[type="submit"]');
        const textoOriginal = botao.textContent;
        
        botao.innerHTML = '<div class="loading"></div> Enviando...';
        botao.disabled = true;
        
        // Fazer a requisi√ß√£o para o webhook
        fetch(webhookURL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(mensagem)
        })
        .then(response => {
            if (response.ok) {
                // Sucesso - redirecionar para p√°gina de agradecimento
                botao.textContent = '‚úÖ Inscri√ß√£o Conclu√≠da!';
                botao.classList.add('form-success');
                
                setTimeout(() => {
                    // Redirecionar para a p√°gina de agradecimento
                    const basePath = window.location.pathname.includes('/pages/') ? '..' : '.';
                    window.location.href = `${basePath}/pages/obrigado.html`;
                }, 1500);
            } else {
                throw new Error(`Erro ${response.status}: ${response.statusText}`);
            }
        })
        .catch(error => {
            console.error('Erro ao enviar para Discord:', error);
            botao.textContent = '‚ùå Erro ao enviar. Tente novamente.';
            botao.classList.add('form-error');
            
            // Tentar salvar localmente como fallback
            salvarLocalmente(dados);
            
            setTimeout(() => {
                botao.textContent = textoOriginal;
                botao.disabled = false;
                botao.classList.remove('form-error');
            }, 3000);
        });
    }
    
    // Fallback: salvar dados localmente se o webhook falhar
    function salvarLocalmente(dados) {
        try {
            const inscricoes = JSON.parse(localStorage.getItem('inscricoes_pendentes') || '[]');
            inscricoes.push({
                ...dados,
                timestamp: new Date().toISOString(),
                enviado: false
            });
            localStorage.setItem('inscricoes_pendentes', JSON.stringify(inscricoes));
            console.log('Inscri√ß√£o salva localmente para envio posterior.');
        } catch (error) {
            console.error('Erro ao salvar localmente:', error);
        }
    }
    
    // Tentar reenviar inscri√ß√µes pendentes quando online
    function tentarReenviarPendentes() {
        try {
            const inscricoes = JSON.parse(localStorage.getItem('inscricoes_pendentes') || '[]');
            if (inscricoes.length > 0 && navigator.onLine) {
                console.log(`Tentando reenviar ${inscricoes.length} inscri√ß√£o(√µes) pendente(s)...`);
                // Aqui voc√™ pode implementar a l√≥gica de reenvio
            }
        } catch (error) {
            console.error('Erro ao processar inscri√ß√µes pendentes:', error);
        }
    }
    
    // Verificar inscri√ß√µes pendentes quando a conex√£o voltar
    window.addEventListener('online', tentarReenviarPendentes);
    
    // Verificar inscri√ß√µes pendentes ao carregar a p√°gina
    tentarReenviarPendentes();
});
